var documenterSearchIndex = {"docs":
[{"location":"variations/#Calculus-of-Variations-–-Implementation","page":"Variation","title":"Calculus of Variations – Implementation","text":"","category":"section"},{"location":"variations/","page":"Variation","title":"Variation","text":"DocTestSetup = quote\n    using EnergyExpressions\n    using AtomicLevels\nend","category":"page"},{"location":"variations/","page":"Variation","title":"Variation","text":"diff","category":"page"},{"location":"variations/#Base.diff","page":"Variation","title":"Base.diff","text":"diff(ab::OrbitalOverlap, o::O)\n\nVary the orbital overlap ⟨a|b⟩ with respect to |o⟩.\n\n\n\n\n\ndiff(ab::OrbitalOverlap, o::Conjugate{O})\n\nVary the orbital overlap ⟨a|b⟩ with respect to ⟨o|.\n\n\n\n\n\ndiff(ome::OrbitalMatrixElement, o::O)\n\nVary the orbital matrix element ⟨abc...|Ω|xyz...⟩ with respect to |o⟩.\n\n\n\n\n\ndiff(ome::OrbitalMatrixElement, o::Conjugate{O})\n\nVary the orbital matrix element ⟨abc...|Ω|xyz...⟩ with respect to ⟨o|.\n\n\n\n\n\ndiff(me::NBodyMatrixElement, o::O)\n\nVary the NBodyMatrixElement me with respect to the orbital o.\n\n\n\n\n\ndiff(E::Matrix{NBodyMatrixElement}, o::O)\n\nVary the matrix of NBodyMatrixElements with respect to the orbital o.\n\nExamples\n\njulia> E = Matrix(OneBodyHamiltonian()+CoulombInteraction(),\n                  SlaterDeterminant.([[:a, :b], [:c, :d]]))\n2×2 Array{EnergyExpressions.NBodyMatrixElement,2}:\n (a|a) + (b|b) - G(a,b) + F(a,b)  - [a b|d c] + [a b|c d]\n - [c d|b a] + [c d|a b]          (c|c) + (d|d) - G(c,d) + F(c,d)\n\njulia> diff(E, :a)\n2×2 SparseArrays.SparseMatrixCSC{LinearCombinationEquation,Int64} with 2 stored entries:\n  [1, 1]  =  ⟨a|ĥ + -⟨b|[a|b] + ⟨a|[b|b]\n  [2, 1]  =  -⟨d|[c|b] + ⟨c|[d|b]\n\njulia> diff(E, Conjugate(:b))\n2×2 SparseArrays.SparseMatrixCSC{LinearCombinationEquation,Int64} with 2 stored entries:\n  [1, 1]  =  ĥ|b⟩ + -[a|b]|a⟩ + [a|a]|b⟩\n  [1, 2]  =  -[a|d]|c⟩ + [a|c]|d⟩\n\n\n\n\n\ndiff(energy_expression, orbitals)\n\nDerive the integro-differential equations for all orbitals, from energy_expression. Returns a MCEquationSystem, that gathers information on which integrals are common to all equations, for efficient equation solving.\n\n\n\n\n\ndiff(fun!, energy_expression, orbitals)\n\nDerive the integro-differential equations for all orbitals, from energy_expression; after each orbital equation has been generated fun! is applied to energy_expression with the current orbital as argument, which allows gradual modification of the energy expression. Returns a MCEquationSystem, that gathers information on which integrals are common to all equations, for efficient equation solving.\n\n\n\n\n\n","category":"function"},{"location":"variations/","page":"Variation","title":"Variation","text":" DocTestSetup = nothing","category":"page"},{"location":"misc/#Miscellaneous","page":"Miscellaneous","title":"Miscellaneous","text":"","category":"section"},{"location":"misc/","page":"Miscellaneous","title":"Miscellaneous","text":"coupled_states\ninvariant_sets","category":"page"},{"location":"misc/#EnergyExpressions.coupled_states","page":"Miscellaneous","title":"EnergyExpressions.coupled_states","text":"coupled_states(E[; i₀=1])\n\nFind all states coupled by the energy expression E, starting from the state with index i₀. This can be useful to reduce the necessary basis or to generate invariant sets for split-operator propagation.\n\n\n\n\n\n","category":"function"},{"location":"misc/#EnergyExpressions.invariant_sets","page":"Miscellaneous","title":"EnergyExpressions.invariant_sets","text":"invariant_sets(E)\n\nGenerate a list of all invariant sets, i.e. configurations that are coupled through the matrix elements of E.\n\nExample\n\njulia> E = sparse([1 1 0; 1 1 0; 0 0 1])\n3×3 SparseMatrixCSC{Int64, Int64} with 5 stored entries:\n 1  1  ⋅\n 1  1  ⋅\n ⋅  ⋅  1\n\njulia> invariant_sets(E)\n2-element Vector{Vector{Int64}}:\n [1, 2]\n [3]\n\n\n\n\n\n","category":"function"},{"location":"calculus_of_variations/#Calculus-of-Variations","page":"Calculus of Variations","title":"Calculus of Variations","text":"","category":"section"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"Calculus of Variations is a mathematical technique for deriving differential equations, whose solutions fulfil a certain criterion. For the case at hand, we are interested in solutions whose total energy matches with the one set up by the energy expression for all the electrons in a system. The following variational rules are useful:","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"beginequation\nvarybraabraketab = ketb\nendequation","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"where the notation varybraabraketab means vary braketab with respect to braa.","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"beginequation\nbegincases\nvarybralonebodylk =\nvarybralmatrixellhamiltoniank =\nhamiltonianketk\nvaryketkonebodylk =\nbralhamiltonian\nendcases\nendequation","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"beginequation\nbeginaligned\nvarybraatwobodydxabcd =\nvarybraatwobodyabcd-twobodyabdc =\nvarybraamatrixelabr_12^-1cd-matrixelabr_12^-1dc \n=\nmatrixelbr_12^-1dketc-\nmatrixelbr_12^-1cketd equiv\ntwobodybdketc-\ntwobodybcketddefd\n(directbd-exchangebd)ketc\nendaligned\nendequation","category":"page"},{"location":"calculus_of_variations/#Helium","page":"Calculus of Variations","title":"Helium","text":"","category":"section"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"Returning to our helium example (now only considering the ground state):","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"DocTestSetup = quote\n    using AtomicLevels\n    using EnergyExpressions\nend","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"julia> he = SlaterDeterminant.(spin_configurations(c\"1s2\"))\n1-element Array{SlaterDeterminant{SpinOrbital{Orbital{Int64}}},1}:\n |1s₀α 1s₀β|\n\njulia> a,b = he[1].orbitals\n2-element Array{SpinOrbital{Orbital{Int64}},1}:\n 1s₀α\n 1s₀β","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"First we find the energy expression:","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"julia> E = Matrix(OneBodyHamiltonian() + CoulombInteraction(), he)\n1×1 Array{EnergyExpressions.NBodyMatrixElement,2}:\n (1s₀α|1s₀α) + (1s₀β|1s₀β) + F(1s₀α,1s₀β)","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"We can now vary this expression with respect to the different spin-orbitals; by convention, we vary the expression with respect to the conjugate orbitals, to derive equations for the unconjugated ones (this is important for complex orbitals, which is the case when studying time-dependent problems):","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"julia> diff(E, Conjugate(a))\n1×1 SparseArrays.SparseMatrixCSC{LinearCombinationEquation,Int64} with 1 stored entry:\n  [1, 1]  =  ĥ|1s₀α⟩ + [1s₀β|1s₀β]|1s₀α⟩\n\njulia> diff(E, Conjugate(b))\n1×1 SparseArrays.SparseMatrixCSC{LinearCombinationEquation,Int64} with 1 stored entry:\n  [1, 1]  =  ĥ|1s₀β⟩ + [1s₀α|1s₀α]|1s₀β⟩","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"This result means that the variation of the first integral in the one-body part of the energy expression yields the one-body Hamiltonian hamiltonian acting on the orbital 1s₀α, whereas the second integral, not containing the first orbital, varies to yield zero. The two-body energy F(1s₀α,1s₀β) varies to yield the two-body potential [1s₀β|1s₀β], again acting on the orbital 1s₀α.","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"If we instead vary with respect to the unconjugated orbitals, we get","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"julia> diff(E, a)\n1×1 SparseArrays.SparseMatrixCSC{LinearCombinationEquation,Int64} with 1 stored entry:\n  [1, 1]  =  ⟨1s₀α|ĥ + ⟨1s₀α|[1s₀β|1s₀β]\n\njulia> diff(E, b)\n1×1 SparseArrays.SparseMatrixCSC{LinearCombinationEquation,Int64} with 1 stored entry:\n  [1, 1]  =  ⟨1s₀β|ĥ + ⟨1s₀β|[1s₀α|1s₀α]","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"that is, we instead derived equations for the conjugated orbitals.","category":"page"},{"location":"calculus_of_variations/","page":"Calculus of Variations","title":"Calculus of Variations","text":"DocTestSetup = nothing","category":"page"},{"location":"slater_determinants/#Slater-determinants","page":"Slater determinants","title":"Slater determinants","text":"","category":"section"},{"location":"slater_determinants/","page":"Slater determinants","title":"Slater determinants","text":"Slater determinants are wavefunctions constructed from anti-symmetrized one-particle states.","category":"page"},{"location":"slater_determinants/","page":"Slater determinants","title":"Slater determinants","text":"CurrentModule = EnergyExpressions\nDocTestSetup = quote\n    using EnergyExpressions\n    using AtomicLevels\nend","category":"page"},{"location":"slater_determinants/#Construction-of-Slater-determinants","page":"Slater determinants","title":"Construction of Slater determinants","text":"","category":"section"},{"location":"slater_determinants/","page":"Slater determinants","title":"Slater determinants","text":"SlaterDeterminant\nSlaterDeterminant(::Configuration{<:SpinOrbital})\nlength(::SlaterDeterminant)\nAdjointSlaterDeterminant\nadjoint(::SlaterDeterminant)\nlength(::AdjointSlaterDeterminant)","category":"page"},{"location":"slater_determinants/#EnergyExpressions.SlaterDeterminant","page":"Slater determinants","title":"EnergyExpressions.SlaterDeterminant","text":"SlaterDeterminant(orbitals::Vector{O})\n\nConstructs a Slater determinant from a set of spin-orbitals.\n\nExamples\n\njulia> SlaterDeterminant([:a, :b])\na(1)b(2) - a(2)b(1)\n\njulia> SlaterDeterminant([:a, :b, :c])\na(1)b(2)c(3) - a(1)b(3)c(2) - a(2)b(1)c(3) + a(2)b(3)c(1) + a(3)b(1)c(2) - a(3)b(2)c(1)\n\n\n\n\n\n","category":"type"},{"location":"slater_determinants/#EnergyExpressions.SlaterDeterminant-Tuple{SpinConfiguration{var\"#s1\"} where var\"#s1\"<:SpinOrbital}","page":"Slater determinants","title":"EnergyExpressions.SlaterDeterminant","text":"SlaterDeterminant(configuration::Configuration{<:SpinOrbital})\n\nConstructs a Slater determinant from the spin-orbitals of the spin-configuration configuration.\n\nExamples\n\njulia> SlaterDeterminant(spin_configurations(c\"1s2\")[1])\n1s₀α(1)1s₀β(2) - 1s₀α(2)1s₀β(1)\n\n\n\n\n\n","category":"method"},{"location":"slater_determinants/#Base.length-Tuple{SlaterDeterminant}","page":"Slater determinants","title":"Base.length","text":"length(slater_determinant)\n\nReturn the number of spin-orbitals in the Slater determinant.\n\n\n\n\n\n","category":"method"},{"location":"slater_determinants/#EnergyExpressions.AdjointSlaterDeterminant","page":"Slater determinants","title":"EnergyExpressions.AdjointSlaterDeterminant","text":"AdjointSlaterDeterminant(slater_determinant)\n\nRepresentation of the Hermitian conjugate (dual vector) of a Slater determinant. Constructed via the usual adjoint operator.\n\n\n\n\n\n","category":"type"},{"location":"slater_determinants/#Base.adjoint-Tuple{SlaterDeterminant}","page":"Slater determinants","title":"Base.adjoint","text":"adjoint(slater_determinant)\n\nConstruct the adjoint of slater_determinant\n\nExamples\n\njulia> SlaterDeterminant([:a, :b])'\n[a(1)b(2) - a(2)b(1)]†\n\n\n\n\n\n","category":"method"},{"location":"slater_determinants/#Base.length-Tuple{EnergyExpressions.AdjointSlaterDeterminant}","page":"Slater determinants","title":"Base.length","text":"length(adjoint_slater_determinant)\n\nReturn the number of spin-orbitals in the adjoint Slater determinant.\n\n\n\n\n\n","category":"method"},{"location":"slater_determinants/#Example-usage","page":"Slater determinants","title":"Example usage","text":"","category":"section"},{"location":"slater_determinants/","page":"Slater determinants","title":"Slater determinants","text":"julia> sa = SlaterDeterminant([:l, :a])\nl(1)a(2) - l(2)a(1)\n\njulia> sb = SlaterDeterminant([:k, :b])\nk(1)b(2) - k(2)b(1)\n\njulia> using AtomicLevels\n\njulia> SlaterDeterminant(spin_configurations(c\"1s2\")[1])\n1s₀α(1)1s₀β(2) - 1s₀α(2)1s₀β(1)","category":"page"},{"location":"slater_determinants/","page":"Slater determinants","title":"Slater determinants","text":" DocTestSetup = nothing","category":"page"},{"location":"equations/#N-body-equations","page":"N-body equations","title":"N-body equations","text":"","category":"section"},{"location":"equations/","page":"N-body equations","title":"N-body equations","text":"DocTestSetup = quote\n    using EnergyExpressions\n    using AtomicLevels\nend","category":"page"},{"location":"equations/","page":"N-body equations","title":"N-body equations","text":"These types are used to represent the integro-differential equations that result from the variation of the energy expression with respect to an orbital. They can, in general, be written on the form","category":"page"},{"location":"equations/","page":"N-body equations","title":"N-body equations","text":"beginequation\n0 = Omega_1ketchibraketab\nendequation","category":"page"},{"location":"equations/","page":"N-body equations","title":"N-body equations","text":"when varying with respect to a conjugated orbital, and","category":"page"},{"location":"equations/","page":"N-body equations","title":"N-body equations","text":"beginequation\n0 = brachiOmega_1braketab\nendequation","category":"page"},{"location":"equations/","page":"N-body equations","title":"N-body equations","text":"when varying with respect to an orbital. In both cases, Omega_1 is a one-body operator, either in itself, or resulting from a contraction over all coordinates but one of a many-body operator (see ContractedOperator).","category":"page"},{"location":"equations/","page":"N-body equations","title":"N-body equations","text":"NBodyEquation\nLinearCombinationEquation","category":"page"},{"location":"equations/#EnergyExpressions.NBodyEquation","page":"N-body equations","title":"EnergyExpressions.NBodyEquation","text":"NBodyEquation{N,O}(orbital, operator::NBodyOperator[, factor::NBodyTerm])\n\nEquation for an orbital, acted upon by an operator, which may be a single-particle operator, or an N-body operator, contracted over all coordinates but one, and optionally multiplied by an NBodyTerm, corresponding to overlaps/matrix elements between other orbitals.\n\n\n\n\n\n","category":"type"},{"location":"equations/#EnergyExpressions.LinearCombinationEquation","page":"N-body equations","title":"EnergyExpressions.LinearCombinationEquation","text":"LinearCombinationEquation(equations)\n\nA type representing a linear combination of NBodyEquations. Typically arises when varying a multi-term energy expression.\n\n\n\n\n\n","category":"type"},{"location":"equations/","page":"N-body equations","title":"N-body equations","text":" DocTestSetup = nothing","category":"page"},{"location":"energy_expressions/#Energy-expressions","page":"Energy Expressions","title":"Energy expressions","text":"","category":"section"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"The average energy of the system is given by","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"beginequation\nE_textrmav defd matrixelPsiHamiltonianPsi\nendequation","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"where Psi is the (multi-electron) wavefunction of the system and Hamiltonian is the full Hamiltonian. A common approach is to approximate the wavefunction as a linear combination of Slater determinants:","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"beginequation\nPsi approx sum_K D_KPhi_K\nendequation","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"where each Phi_K constitutes an anti-symmetrized product of one-particle spin-orbitals chi_i. Depending on whether these spin-orbitals are chosen to be orthogonal or not, with respect to each other, the energy expression takes different forms.","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"Other choices for the expansion are possible, for instance Configuration state functions. The algebra for generating energy expressions from such objects is more involved, and is not implemented in this library.","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"The examples below are for atomic configurations, but the library is not limited to this case, rather, it could work with any kind of configuration constructed from single-particle spin-orbitals. For example, it possible to work with normal Julia Symbols denoting the spin-orbitals. This can be used to derive equations of motion purely symbolically.","category":"page"},{"location":"energy_expressions/#Orthogonal-case,-Slater–Condon-rules","page":"Energy Expressions","title":"Orthogonal case, Slater–Condon rules","text":"","category":"section"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"DocTestSetup = quote\n    using AtomicLevels\n    using EnergyExpressions\nend","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"First, we find all configurations possible for two configurations of helium, and convert them into SlaterDeterminants.","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> he = SlaterDeterminant.(spin_configurations(c\"1s2\"))\n1-element Array{SlaterDeterminant{SpinOrbital{Orbital{Int64}}},1}:\n |1s₀α 1s₀β|\n\njulia> he_exc = SlaterDeterminant.(spin_configurations(c\"1s 2p\"))\n12-element Array{SlaterDeterminant{SpinOrbital{Orbital{Int64}}},1}:\n |1s₀α 2p₋₁α|\n |1s₀α 2p₋₁β|\n |1s₀α 2p₀α|\n |1s₀α 2p₀β|\n |1s₀α 2p₁α|\n |1s₀α 2p₁β|\n |1s₀β 2p₋₁α|\n |1s₀β 2p₋₁β|\n |1s₀β 2p₀α|\n |1s₀β 2p₀β|\n |1s₀β 2p₁α|\n |1s₀β 2p₁β|","category":"page"},{"location":"energy_expressions/#One-body-energy-term","page":"Energy Expressions","title":"One-body energy term","text":"","category":"section"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"First we create a OneBodyHamiltonian, the one-body operator that corresponds to the physical quantity energy:","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> h = OneBodyHamiltonian()\nĥ","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"We can then evaluate matrix elements between Slater determinants corresponding to different configurations.","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"The Slater–Condon rules state that the one-body energy expression between two configurations is","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"in case the configurations are identical, onebodyPhi_APhi_B = onebodyii:\njulia> Matrix(h, he)\n1×1 Array{EnergyExpressions.NBodyMatrixElement,2}:\n (1s₀α|1s₀α) + (1s₀β|1s₀β)\nin case the configurations differ by one orbital, onebodyPhi_APhi_B = onebodyij:\njulia> Matrix(h, [he[1],he_exc[2]])\n2×2 Array{EnergyExpressions.NBodyMatrixElement,2}:\n (1s₀α|1s₀α) + (1s₀β|1s₀β)  (1s₀β|2p₋₁β)\n (2p₋₁β|1s₀β)               (1s₀α|1s₀α) + (2p₋₁β|2p₋₁β)\nWe had to choose the second excited state, since the OneBodyHamiltonian does not couple orbitals of differing spin; therefore the corresponding matrix elements would be zero. The diagonal matrix elements correspond to the first case.\nin case the configurations differ by more than one orbital, onebodyPhi_APhi_B = 0:\njulia> Matrix(h, [he[1],he_exc[10]])\n2×2 Array{EnergyExpressions.NBodyMatrixElement,2}:\n (1s₀α|1s₀α) + (1s₀β|1s₀β)  0\n 0                          (1s₀β|1s₀β) + (2p₀β|2p₀β)","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"We can easily generate the full one-body matrix:","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> Matrix(h, vcat(he,he_exc))\n13×13 Array{EnergyExpressions.NBodyMatrixElement,2}:\n (1s₀α|1s₀α) + (1s₀β|1s₀β)  0                            (1s₀β|2p₋₁β)                 …  - (1s₀α|2p₁α)              0\n 0                          (1s₀α|1s₀α) + (2p₋₁α|2p₋₁α)  0                               0                          0\n (2p₋₁β|1s₀β)               0                            (1s₀α|1s₀α) + (2p₋₁β|2p₋₁β)     0                          0\n 0                          (2p₀α|2p₋₁α)                 0                               0                          0\n (2p₀β|1s₀β)                0                            (2p₀β|2p₋₁β)                    0                          0\n 0                          (2p₁α|2p₋₁α)                 0                            …  0                          0\n (2p₁β|1s₀β)                0                            (2p₁β|2p₋₁β)                    0                          0\n - (2p₋₁α|1s₀α)             0                            0                               (2p₋₁α|2p₁α)               0\n 0                          0                            0                               0                          (2p₋₁β|2p₁β)\n - (2p₀α|1s₀α)              0                            0                               (2p₀α|2p₁α)                0\n 0                          0                            0                            …  0                          (2p₀β|2p₁β)\n - (2p₁α|1s₀α)              0                            0                               (1s₀β|1s₀β) + (2p₁α|2p₁α)  0\n 0                          0                            0                               0                          (1s₀β|1s₀β) + (2p₁β|2p₁β)","category":"page"},{"location":"energy_expressions/#Two-body-energy-term","page":"Energy Expressions","title":"Two-body energy term","text":"","category":"section"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"Similar considerations apply for the two-body energy terms between two configurations. To make it more interesting, we consider lithium which has three electrons:","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> li = SlaterDeterminant.(spin_configurations(c\"1s2 2s\"))\n2-element Array{SlaterDeterminant{SpinOrbital{Orbital{Int64}}},1}:\n |1s₀α 1s₀β 2s₀α|\n |1s₀α 1s₀β 2s₀β|\n\njulia> li_exc = SlaterDeterminant.(spin_configurations(c\"1s 2s 2p\"))\n24-element Array{SlaterDeterminant{SpinOrbital{Orbital{Int64}}},1}:\n |1s₀α 2s₀α 2p₋₁α|\n |1s₀α 2s₀α 2p₋₁β|\n |1s₀α 2s₀α 2p₀α|\n |1s₀α 2s₀α 2p₀β|\n |1s₀α 2s₀α 2p₁α|\n |1s₀α 2s₀α 2p₁β|\n |1s₀α 2s₀β 2p₋₁α|\n |1s₀α 2s₀β 2p₋₁β|\n |1s₀α 2s₀β 2p₀α|\n |1s₀α 2s₀β 2p₀β|\n |1s₀α 2s₀β 2p₁α|\n |1s₀α 2s₀β 2p₁β|\n |1s₀β 2s₀α 2p₋₁α|\n |1s₀β 2s₀α 2p₋₁β|\n |1s₀β 2s₀α 2p₀α|\n |1s₀β 2s₀α 2p₀β|\n |1s₀β 2s₀α 2p₁α|\n |1s₀β 2s₀α 2p₁β|\n |1s₀β 2s₀β 2p₋₁α|\n |1s₀β 2s₀β 2p₋₁β|\n |1s₀β 2s₀β 2p₀α|\n |1s₀β 2s₀β 2p₀β|\n |1s₀β 2s₀β 2p₁α|\n |1s₀β 2s₀β 2p₁β|","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"The operator we choose is the Coulomb repulsion, implemented by CoulombInteraction:","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> H = CoulombInteraction()\nĝ","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"in case the configurations are identical, twobodydxPhi_APhi_B = twobodydxijij:\njulia> Matrix(H, li)[1,1]\nF(1s₀α,1s₀β) - G(1s₀α,2s₀α) + F(1s₀α,2s₀α) + F(1s₀β,2s₀α)\nNB that some terms in the sum vanish due to spin-conservation in the two-body integral.\nin case the configurations differ by one orbital, twobodydxPhi_APhi_B = twobodydxikjk:\njulia> Matrix(H, [li[1],li_exc[6]])[2,1]\n- [1s₀α 2p₁β|1s₀α 1s₀β] - [2s₀α 2p₁β|2s₀α 1s₀β]\nin case the configurations differ by two orbitals, twobodydxPhi_APhi_B = twobodydxijkl:\njulia> Matrix(H, [li[1],li_exc[11]])[1,2]\n[1s₀β 2s₀α|2s₀β 2p₁α]\nin case the configurations differ by more than two orbital, twobodydxPhi_APhi_B = 0:\njulia> Matrix(H, [li[1],li_exc[23]])[1,2]\n0\nIn this particular case, the matrix element vanishes because of spin-conservation, as well.","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"Again, we can generate the full two-body matrix:","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> Matrix(H, vcat(li,li_exc))\n26×26 Array{EnergyExpressions.NBodyMatrixElement,2}:\n F(1s₀α,1s₀β) - G(1s₀α,2s₀α) + F(1s₀α,2s₀α) + F(1s₀β,2s₀α)                 0                                                                           …  0\n 0                                                                         F(1s₀α,1s₀β) + F(1s₀α,2s₀β) - G(1s₀β,2s₀β) + F(1s₀β,2s₀β)                      0\n 0                                                                         0                                                                              0\n - [1s₀α 2p₋₁β|1s₀α 1s₀β] - [2s₀α 2p₋₁β|2s₀α 1s₀β]                         0                                                                              0\n 0                                                                         0                                                                              0\n - [1s₀α 2p₀β|1s₀α 1s₀β] - [2s₀α 2p₀β|2s₀α 1s₀β]                           0                                                                           …  0\n 0                                                                         0                                                                              0\n - [1s₀α 2p₁β|1s₀α 1s₀β] - [2s₀α 2p₁β|2s₀α 1s₀β]                           0                                                                              0\n [2s₀β 2p₋₁α|1s₀β 2s₀α]                                                    0                                                                              0\n 0                                                                         - [1s₀α 2p₋₁β|1s₀α 1s₀β] - [2s₀β 2p₋₁β|2s₀β 1s₀β] + [2s₀β 2p₋₁β|1s₀β 2s₀β]     0\n [2s₀β 2p₀α|1s₀β 2s₀α]                                                     0                                                                           …  0\n 0                                                                         - [1s₀α 2p₀β|1s₀α 1s₀β] - [2s₀β 2p₀β|2s₀β 1s₀β] + [2s₀β 2p₀β|1s₀β 2s₀β]        0\n [2s₀β 2p₁α|1s₀β 2s₀α]                                                     0                                                                              0\n 0                                                                         - [1s₀α 2p₁β|1s₀α 1s₀β] - [2s₀β 2p₁β|2s₀β 1s₀β] + [2s₀β 2p₁β|1s₀β 2s₀β]        0\n [1s₀β 2p₋₁α|1s₀β 1s₀α] + [2s₀α 2p₋₁α|2s₀α 1s₀α] - [2s₀α 2p₋₁α|1s₀α 2s₀α]  0                                                                              0\n 0                                                                         - [2s₀α 2p₋₁β|1s₀α 2s₀β]                                                    …  0\n [1s₀β 2p₀α|1s₀β 1s₀α] + [2s₀α 2p₀α|2s₀α 1s₀α] - [2s₀α 2p₀α|1s₀α 2s₀α]     0                                                                              0\n 0                                                                         - [2s₀α 2p₀β|1s₀α 2s₀β]                                                        0\n [1s₀β 2p₁α|1s₀β 1s₀α] + [2s₀α 2p₁α|2s₀α 1s₀α] - [2s₀α 2p₁α|1s₀α 2s₀α]     0                                                                              0\n 0                                                                         - [2s₀α 2p₁β|1s₀α 2s₀β]                                                        0\n 0                                                                         [1s₀β 2p₋₁α|1s₀β 1s₀α] + [2s₀β 2p₋₁α|2s₀β 1s₀α]                             …  0\n 0                                                                         0                                                                              - [1s₀β 2p₋₁β|2p₁β 1s₀β] + [1s₀β 2p₋₁β|1s₀β 2p₁β] - [2s₀β 2p₋₁β|2p₁β 2s₀β] + [2s₀β 2p₋₁β|2s₀β 2p₁β]\n 0                                                                         [1s₀β 2p₀α|1s₀β 1s₀α] + [2s₀β 2p₀α|2s₀β 1s₀α]                                  0\n 0                                                                         0                                                                              - [1s₀β 2p₀β|2p₁β 1s₀β] + [1s₀β 2p₀β|1s₀β 2p₁β] - [2s₀β 2p₀β|2p₁β 2s₀β] + [2s₀β 2p₀β|2s₀β 2p₁β]\n 0                                                                         [1s₀β 2p₁α|1s₀β 1s₀α] + [2s₀β 2p₁α|2s₀β 1s₀α]                                  0\n 0                                                                         0                                                                           …  - G(1s₀β,2s₀β) + F(1s₀β,2s₀β) - G(1s₀β,2p₁β) + F(1s₀β,2p₁β) - G(2s₀β,2p₁β) + F(2s₀β,2p₁β)","category":"page"},{"location":"energy_expressions/#Linear-combination-of-N-body-operators","page":"Energy Expressions","title":"Linear combination of N-body operators","text":"","category":"section"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"Finally, we may form a linear combination of different many-body operators:","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> H = OneBodyHamiltonian() + CoulombInteraction()","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"which allows to generate the full energy-expression matrix simultaneously:","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> Matrix(H, vcat(he,he_exc[1:2]))\n3×3 Array{EnergyExpressions.NBodyMatrixElement,2}:\n (1s₀α|1s₀α) + (1s₀β|1s₀β) + F(1s₀α,1s₀β)  0                                                            (1s₀β|2p₋₁β) + [1s₀α 1s₀β|1s₀α 2p₋₁β]\n 0                                         (1s₀α|1s₀α) + (2p₋₁α|2p₋₁α) - G(1s₀α,2p₋₁α) + F(1s₀α,2p₋₁α)  0\n (2p₋₁β|1s₀β) + [1s₀α 2p₋₁β|1s₀α 1s₀β]     0                                                            (1s₀α|1s₀α) + (2p₋₁β|2p₋₁β) + F(1s₀α,2p₋₁β)","category":"page"},{"location":"energy_expressions/#Non-orthogonal-case,-Löwdin-rules","page":"Energy Expressions","title":"Non-orthogonal case, Löwdin rules","text":"","category":"section"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"This case is more complex and is invoked by providing a list of OrbitalOverlaps designating those pairs of orbitals which are chosen to be non-orthogonal. Beware that the computation complexity increases factorially with the amount of non-orthogonalities! It is thus not a good idea to choose all orbitals to non-orthogonal to one another.","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"For simplicity, we now consider a set of symbolic orbitals: a,b,c, where specify that b and c are non-orthogonal:","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> cfgs = SlaterDeterminant.([[:a, :b, :c], [:b, :d, :e]])\n2-element Array{SlaterDeterminant{Symbol},1}:\n |a b c|\n |b d e|","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"The pairwise non-orthogonality can be specified simply as","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> overlaps = [OrbitalOverlap(:b, :c)]\n1-element Array{OrbitalOverlap{Symbol,Symbol},1}:\n ⟨b|c⟩","category":"page"},{"location":"energy_expressions/#One-body-energy-term-2","page":"Energy Expressions","title":"One-body energy term","text":"","category":"section"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"onebodyPhi_APhi_B = (-)^i+jonebodyijD^AB(ij)","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"where D^AB(ij) is the determinant minor, where the row i and column j are stricken out.","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> Matrix(OneBodyHamiltonian(), cfgs, overlaps)\n2×2 Array{EnergyExpressions.NBodyMatrixElement,2}:\n (a|a) - (a|a)⟨c|b⟩⟨b|c⟩ + (b|b) - (b|c)⟨c|b⟩ - (c|b)⟨b|c⟩ + (c|c)  0\n 0                                                                  (b|b) + (d|d) + (e|e)","category":"page"},{"location":"energy_expressions/#Two-body-energy-term-2","page":"Energy Expressions","title":"Two-body energy term","text":"","category":"section"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"Similarly, we have","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"matrixelPhi_AOmega_2Phi_B = (-)^i+j+k+lmatrixelijOmega_2klD^AB(ijkl)","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"where D^AB(ijkl) is the determinant minor, where the rows i,j and columns k,l are stricken out.","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"The expressions become rather lengthy, so we only look at one particular matrix element:","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"julia> Matrix(CoulombInteraction(), cfgs, overlaps)[1,2]\n- ⟨c|b⟩[a b|e d] + ⟨c|b⟩[a b|d e] + [a c|e d] - [a c|d e]","category":"page"},{"location":"energy_expressions/#Higher-order-terms","page":"Energy Expressions","title":"Higher-order terms","text":"","category":"section"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"For details of the implementation and the general N-body case, see N-body matrix elements.","category":"page"},{"location":"energy_expressions/#References","page":"Energy Expressions","title":"References","text":"","category":"section"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"Per-Olov Löwdin (1955). Quantum Theory of Many-Particle Systems. I. Physical Interpretations by Means of Density Matrices, Natural Spin-Orbitals, and Convergence Problems in the Method of Configurational Interaction. Physical Review, 97(6), 1474–1489. 10.1103/physrev.97.1474\nPer-Olov Löwdin (1955). Quantum Theory of Many-Particle Systems. II. Study of the Ordinary Hartree-Fock Approximation. Physical Review, 97(6), 1490–1508. 10.1103/physrev.97.1490\nPer-Olov Löwdin (1955). Quantum Theory of Many-Particle Systems. III. Extension of the Hartree-Fock Scheme to Include Degenerate Systems and Correlation Effects. Physical Review, 97(6), 1509–1520. 10.1103/physrev.97.1509","category":"page"},{"location":"energy_expressions/","page":"Energy Expressions","title":"Energy Expressions","text":"DocTestSetup = nothing","category":"page"},{"location":"system_of_equations/#System-of-equations","page":"System of equations","title":"System of equations","text":"","category":"section"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"When dealing with large energy expressions resulting from many configurations, when deriving the orbital equations (see N-body equations and Calculus of Variations – Implementation), many of the integrals involved will be shared between the different terms of the equations. It is therefore of interest to gather a list of integrals that can be calculated once at every iteration (in a self-consistent procedure for finding eigenstates, or in time-propagation), and whose values can then be reused when solving the individual equations. The routines described below, although primitive, aid in this effort.","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"The idea is the following: With an energy expression on the form","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"beginequation\nE(vecPvecc) = fracvecc^H\nmatHveccvecc^Hvecc\nendequation","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"where vecP is a set of orbitals, vecc is a vector of mixing coefficients, and","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"beginequation\nmatH_ij defd matrixelchi_iHamiltonianchi_j\nendequation","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"all terms of the equations can be written on the form","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"beginequation\nlabeleqnequation-term\noperatorAketchi\nunderbraceleft\nsum_n alpha_n conjc_i_n c_j_n\nprod_k int_n_k\nright_textrmRank 0\nendequation","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"(or on its dual form with conjugated orbitals) where operatorA is some one-body operator, alpha_n a coefficient due to the energy expression, conjc_i_n c_j_n the coefficient due to the multi-configurational expansion, and finally int_n_k all the extra integrals (which are necessarily zero-body operators) that may appear due to non-orthogonal orbitals (and which may be shared between many equations). The operator operatorA can have ranks 0–2; formally, it can only have rank 0 (multiplication by a scalar) or 2 (multiplication by a matrix). What we somewhat sloppily to refer by “rank 1” is an operator of rank 2, but which is diagonal in the underlying coordinate, such as a local potential.","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"Thus, to efficiently perform an iteration, one would first compute all common integrals int_k, and then for every equation term of the form eqrefeqnequation-term, form the coefficient in the brakets, calculate the action of the operator operatorA on the orbital chi, multiplied the coefficient.","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"There are a few important special cases of eqrefeqnequation-term:","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"Field-free, one-body Hamiltonian, i.e. operatorA=hamiltonian_0. This is the contribution from the orbital ketchi to itself. Rank 2.\nOne-body Hamiltonian, including field, i.e. operatorA=hamiltonian. This is the contribution from another orbital ketchi to ketchi via some off-diagonal coupling, such as an external field (e.g. an electro–magnetic field). Rank 2.\nDirect interaction, i.e. operatorA=directkl, where two other orbitals ketchi_k and ketchi_l together form a potential acting on ketchi. “Rank 1”.\nExchange interaction, i.e. operatorA=exchangekl, where another orbital ketchi_k and ketchi together form a potential acting on a third orbital ketchi_l. Rank 2.\nSource term, i.e. a contribution that does not involve ketchi in any way. This term arises from other configurations in the multi-configurational expansion. Case 2. is also formulated in this way. Rank 0–2. If for some reason the source orbital and/or the operator acting on it is fixed, it may be possible to precompute the effect of the operator on the source orbital and reduce the computational complexity to a rank 0-equivalent operation.","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"CurrentModule = EnergyExpressions\nDocTestSetup = quote\n    using EnergyExpressions\nend","category":"page"},{"location":"system_of_equations/#Example","page":"System of equations","title":"Example","text":"","category":"section"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"We start by defining a set of configurations and specifying that a few of the constituent orbitals are non-orthogonal:","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"julia> cfgs = [[:i, :j, :l, :k̃], [:i, :j, :k, :l̃]]\n2-element Array{Array{Symbol,1},1}:\n [:i, :j, :l, :k̃]\n [:i, :j, :k, :l̃]\n\njulia> continua = [:k̃, :l̃]\n2-element Array{Symbol,1}:\n :k̃\n :l̃\n\njulia> overlaps = [OrbitalOverlap(i,j) for i in continua for j in continua]\n4-element Array{OrbitalOverlap{Symbol,Symbol},1}:\n ⟨k̃|k̃⟩\n ⟨k̃|l̃⟩\n ⟨l̃|k̃⟩\n ⟨l̃|l̃⟩","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"We then set up the energy expression as before:","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"julia> H = OneBodyHamiltonian() + CoulombInteraction()\nĥ + ĝ\n\njulia> E = Matrix(H, SlaterDeterminant.(cfgs), overlaps)\n2×2 Array{EnergyExpressions.NBodyMatrixElement,2}:\n (i|i)⟨k̃|k̃⟩ + (j|j)⟨k̃|k̃⟩ + (l|l)⟨k̃|k̃⟩ + (k̃|k̃) - G(i,j)⟨k̃|k̃⟩ + F(i,j)⟨k̃|k̃⟩ + … - G(i,k̃) + F(i,k̃) - G(j,k̃) + F(j,k̃) - G(l,k̃) + F(l,k̃)  …  (l|k)⟨k̃|l̃⟩ - [i l|k i]⟨k̃|l̃⟩ + [i l|i k]⟨k̃|l̃⟩ - [j l|k j]⟨k̃|l̃⟩ + [j l|j k]⟨k̃|l̃⟩ - [l k̃|l̃ k] + [l k̃|k l̃]\n (k|l)⟨l̃|k̃⟩ - [i k|l i]⟨l̃|k̃⟩ + [i k|i l]⟨l̃|k̃⟩ - [j k|l j]⟨l̃|k̃⟩ + [j k|j l]⟨l̃|k̃⟩ - [k l̃|k̃ l] + [k l̃|l k̃]                                     (i|i)⟨l̃|l̃⟩ + (j|j)⟨l̃|l̃⟩ + (k|k)⟨l̃|l̃⟩ + (l̃|l̃) - G(i,j)⟨l̃|l̃⟩ + F(i,j)⟨l̃|l̃⟩ + … - G(i,l̃) + F(i,l̃) - G(j,l̃) + F(j,l̃) - G(k,l̃) + F(k,l̃)","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"Finally, we derive the coupled integro-differential equation system for the continuum orbitals k̃, l̃:","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"julia> eqs = diff(E, Conjugate.(continua))\nEnergyExpressions.MCEquationSystem(EnergyExpressions.OrbitalEquation{Symbol,SparseArrays.SparseMatrixCSC{LinearCombinationEquation,Int64}}[OrbitalEquation(k̃):\n  [1, 1]  =  + (i|i)𝐈₁|k̃⟩ + (j|j)𝐈₁|k̃⟩ + (l|l)𝐈₁|k̃⟩ + ĥ|k̃⟩ - G(i,j)𝐈₁|k̃⟩ + F(i,j)𝐈₁|k̃⟩ - G(i,l)𝐈₁|k̃⟩ + F(i,l)𝐈₁|k̃⟩ - G(j,l)𝐈₁|k̃⟩ + F(j,l)𝐈₁|k̃⟩ - [i|k̃]|i⟩ + [i|i]|k̃⟩ - [j|k̃]|j⟩ + [j|j]|k̃⟩ - [l|k̃]|l⟩ + [l|l]|k̃⟩\n  [1, 2]  =  + (l|k)𝐈₁|l̃⟩ - [i l|k i]𝐈₁|l̃⟩ + [i l|i k]𝐈₁|l̃⟩ - [j l|k j]𝐈₁|l̃⟩ + [j l|j k]𝐈₁|l̃⟩ - [l|l̃]|k⟩ + [l|k]|l̃⟩\n, OrbitalEquation(l̃):\n  [2, 1]  =  + (k|l)𝐈₁|k̃⟩ - [i k|l i]𝐈₁|k̃⟩ + [i k|i l]𝐈₁|k̃⟩ - [j k|l j]𝐈₁|k̃⟩ + [j k|j l]𝐈₁|k̃⟩ - [k|k̃]|l⟩ + [k|l]|k̃⟩\n  [2, 2]  =  + (i|i)𝐈₁|l̃⟩ + (j|j)𝐈₁|l̃⟩ + (k|k)𝐈₁|l̃⟩ + ĥ|l̃⟩ - G(i,j)𝐈₁|l̃⟩ + F(i,j)𝐈₁|l̃⟩ - G(i,k)𝐈₁|l̃⟩ + F(i,k)𝐈₁|l̃⟩ - G(j,k)𝐈₁|l̃⟩ + F(j,k)𝐈₁|l̃⟩ - [i|l̃]|i⟩ + [i|i]|l̃⟩ - [j|l̃]|j⟩ + [j|j]|l̃⟩ - [k|l̃]|k⟩ + [k|k]|l̃⟩\n], Any[(i|i), (j|j), (l|l), G(i,j), F(i,j), G(i,l), F(i,l), G(j,l), F(j,l), [i|i]  …  [j k|l j], [j k|j l], [k|k̃], [k|l], (k|k), G(i,k), F(i,k), G(j,k), F(j,k), [k|k]])","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"We can investigate the MCEquationSystem object eqs a bit. It consists of two coupled equations:","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"julia> eqs.equations\n2-element Array{EnergyExpressions.OrbitalEquation{Symbol,SparseArrays.SparseMatrixCSC{LinearCombinationEquation,Int64}},1}:\n OrbitalEquation(k̃):\n  [1, 1]  =  + (i|i)𝐈₁|k̃⟩ + (j|j)𝐈₁|k̃⟩ + (l|l)𝐈₁|k̃⟩ + ĥ|k̃⟩ - G(i,j)𝐈₁|k̃⟩ + F(i,j)𝐈₁|k̃⟩ - G(i,l)𝐈₁|k̃⟩ + F(i,l)𝐈₁|k̃⟩ - G(j,l)𝐈₁|k̃⟩ + F(j,l)𝐈₁|k̃⟩ - [i|k̃]|i⟩ + [i|i]|k̃⟩ - [j|k̃]|j⟩ + [j|j]|k̃⟩ - [l|k̃]|l⟩ + [l|l]|k̃⟩\n  [1, 2]  =  + (l|k)𝐈₁|l̃⟩ - [i l|k i]𝐈₁|l̃⟩ + [i l|i k]𝐈₁|l̃⟩ - [j l|k j]𝐈₁|l̃⟩ + [j l|j k]𝐈₁|l̃⟩ - [l|l̃]|k⟩ + [l|k]|l̃⟩\n\n OrbitalEquation(l̃):\n  [2, 1]  =  + (k|l)𝐈₁|k̃⟩ - [i k|l i]𝐈₁|k̃⟩ + [i k|i l]𝐈₁|k̃⟩ - [j k|l j]𝐈₁|k̃⟩ + [j k|j l]𝐈₁|k̃⟩ - [k|k̃]|l⟩ + [k|l]|k̃⟩\n  [2, 2]  =  + (i|i)𝐈₁|l̃⟩ + (j|j)𝐈₁|l̃⟩ + (k|k)𝐈₁|l̃⟩ + ĥ|l̃⟩ - G(i,j)𝐈₁|l̃⟩ + F(i,j)𝐈₁|l̃⟩ - G(i,k)𝐈₁|l̃⟩ + F(i,k)𝐈₁|l̃⟩ - G(j,k)𝐈₁|l̃⟩ + F(j,k)𝐈₁|l̃⟩ - [i|l̃]|i⟩ + [i|i]|l̃⟩ - [j|l̃]|j⟩ + [j|j]|l̃⟩ - [k|l̃]|k⟩ + [k|k]|l̃⟩","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"The first equation consists of the following terms:","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"julia> eqs.equations[1].terms\n6-element Array{Pair{Int64,Array{EnergyExpressions.MCTerm,1}},1}:\n  0 => [MCTerm{Int64,IdentityOperator{1},Symbol}(1, 1, 1, 𝐈₁, :k̃, [1]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 1, 1, 𝐈₁, :k̃, [2]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 1, 1, 𝐈₁, :k̃, [3]), MCTerm{Int64,OneBodyHamiltonian,Symbol}(1, 1, 1, ĥ, :k̃, Int64[]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 1, -1, 𝐈₁, :k̃, [4]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 1, 1, 𝐈₁, :k̃, [5]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 1, -1, 𝐈₁, :k̃, [6]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 1, 1, 𝐈₁, :k̃, [7]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 1, -1, 𝐈₁, :k̃, [8]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 1, 1, 𝐈₁, :k̃, [9]), MCTerm{Int64,ContractedOperator{1,2,1,Symbol,CoulombInteraction,Symbol},Symbol}(1, 1, -1, [i|k̃], :i, Int64[]), MCTerm{Int64,ContractedOperator{1,2,1,Symbol,CoulombInteraction,Symbol},Symbol}(1, 1, -1, [j|k̃], :j, Int64[]), MCTerm{Int64,ContractedOperator{1,2,1,Symbol,CoulombInteraction,Symbol},Symbol}(1, 1, -1, [l|k̃], :l, Int64[]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 2, 1, 𝐈₁, :l̃, [13]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 2, -1, 𝐈₁, :l̃, [14]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 2, 1, 𝐈₁, :l̃, [15]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 2, -1, 𝐈₁, :l̃, [16]), MCTerm{Int64,IdentityOperator{1},Symbol}(1, 2, 1, 𝐈₁, :l̃, [17])]\n 10 => [MCTerm{Int64,ContractedOperator{1,2,1,Symbol,CoulombInteraction,Symbol},Symbol}(1, 1, 1, [i|i], :k̃, Int64[])]\n 19 => [MCTerm{Int64,ContractedOperator{1,2,1,Symbol,CoulombInteraction,Symbol},Symbol}(1, 2, 1, [l|k], :l̃, Int64[])]\n 11 => [MCTerm{Int64,ContractedOperator{1,2,1,Symbol,CoulombInteraction,Symbol},Symbol}(1, 1, 1, [j|j], :k̃, Int64[])]\n 12 => [MCTerm{Int64,ContractedOperator{1,2,1,Symbol,CoulombInteraction,Symbol},Symbol}(1, 1, 1, [l|l], :k̃, Int64[])]\n 18 => [MCTerm{Int64,ContractedOperator{1,2,1,Symbol,CoulombInteraction,Symbol},Symbol}(1, 2, -1, [l|l̃], :k, Int64[])]","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"where the MCTerm objects indicate which components of the mixing coefficient vector vecc need to be multiplied, and all the integers are pointers to the list of common integrals:","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"julia> eqs.integrals\n32-element Array{Any,1}:\n (i|i)\n (j|j)\n (l|l)\n G(i,j)\n F(i,j)\n G(i,l)\n F(i,l)\n G(j,l)\n F(j,l)\n [i|i]\n [j|j]\n [l|l]\n (l|k)\n [i l|k i]\n [i l|i k]\n [j l|k j]\n [j l|j k]\n [l|l̃]\n [l|k]\n (k|l)\n [i k|l i]\n [i k|i l]\n [j k|l j]\n [j k|j l]\n [k|k̃]\n [k|l]\n (k|k)\n G(i,k)\n F(i,k)\n G(j,k)\n F(j,k)\n [k|k]","category":"page"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"From this we see that the 𝐈₁ (one-body identity operator) contribution to |k̃⟩ can be written as a linear combination of |k̃⟩ and |l̃⟩, weighted by different components of the mixing coefficient vector vecc and various other integrals. This is all the information necessary to set up an efficient equation solver.","category":"page"},{"location":"system_of_equations/#Implementation","page":"System of equations","title":"Implementation","text":"","category":"section"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"MCTerm\nOrbitalEquation\norbital_equation\nMCEquationSystem\npushifmissing!","category":"page"},{"location":"system_of_equations/#EnergyExpressions.MCTerm","page":"System of equations","title":"EnergyExpressions.MCTerm","text":"MCTerm(i, j, coeff, operator, source_orbital, integrals=[])\n\nRepresents one term in the multi-configurational expansion. i and j are indices in the mixing-coefficient vector c (which is subject to optimization, and thus has to be referred to), coeff is an additional coefficient, and integrals is a list of indices into the vector of common integrals, the values of which should be multiplied to form the overall coefficient.\n\n\n\n\n\n","category":"type"},{"location":"system_of_equations/#EnergyExpressions.OrbitalEquation","page":"System of equations","title":"EnergyExpressions.OrbitalEquation","text":"OrbitalEquation(orbital, equation,\n                one_body, direct_terms, exchange_terms, source_terms)\n\nRepresents the integro-differential equation for orbital, expressed as a linear combination of the different terms, with pointers to the list of common integrals that is stored by the encompassing MCEquationSystem object.\n\n\n\n\n\n","category":"type"},{"location":"system_of_equations/#EnergyExpressions.orbital_equation","page":"System of equations","title":"EnergyExpressions.orbital_equation","text":"orbital_equation(E::EnergyExpression, orbital, integrals::Vector)\n\nGenerate the OrbitalEquation governing orbital by varying the EnergyExpression E, and storing common expressions in integrals.\n\n\n\n\n\n","category":"function"},{"location":"system_of_equations/#EnergyExpressions.MCEquationSystem","page":"System of equations","title":"EnergyExpressions.MCEquationSystem","text":"MCEquationSystem(equations, integrals)\n\nRepresents a coupled system of integro-differential equations, resulting from the variation of a multi-configurational EnergyExpression, with respect to all constituent orbitals. All integrals that are in common between the equations need only be computed once per iteration, for efficiency.\n\n\n\n\n\n","category":"type"},{"location":"system_of_equations/#EnergyExpressions.pushifmissing!","page":"System of equations","title":"EnergyExpressions.pushifmissing!","text":"pushifmissing!(vector, element)\n\nPush element to the end of vector, if not already present. Returns the index of element in vector.\n\n\n\n\n\n","category":"function"},{"location":"system_of_equations/","page":"System of equations","title":"System of equations","text":"CurrentModule = nothing\nDocTestSetup = nothing","category":"page"},{"location":"common_operators/#Common-N-body-operators","page":"Common N-body operators","title":"Common N-body operators","text":"","category":"section"},{"location":"common_operators/","page":"Common N-body operators","title":"Common N-body operators","text":"DocTestSetup = quote\n    using EnergyExpressions\n    using AtomicLevels\nend","category":"page"},{"location":"common_operators/","page":"Common N-body operators","title":"Common N-body operators","text":"A few N-body operators that are common in quantum mechanics. It is possible to form a composite Hamiltonian thus:","category":"page"},{"location":"common_operators/","page":"Common N-body operators","title":"Common N-body operators","text":"julia> H = OneBodyHamiltonian() + CoulombInteraction()\nĥ + ĝ","category":"page"},{"location":"common_operators/","page":"Common N-body operators","title":"Common N-body operators","text":"If then define a set of Slater determinants, we can easily form the energy expression:","category":"page"},{"location":"common_operators/","page":"Common N-body operators","title":"Common N-body operators","text":"julia> slaters = SlaterDeterminant.([[:a, :b], [:c, :d], [:a, :c]])\n3-element Array{SlaterDeterminant{Symbol},1}:\n |a b|\n |c d|\n |a c|\n\njulia> Matrix(H, slaters)\n3×3 Array{EnergyExpressions.NBodyMatrixElement,2}:\n (a|a) + (b|b) - G(a,b) + F(a,b)  - [a b|d c] + [a b|c d]          (b|c) - [a b|c a] + [a b|a c]\n - [c d|b a] + [c d|a b]          (c|c) + (d|d) - G(c,d) + F(c,d)  - (d|a) - [c d|c a] + [c d|a c]\n (c|b) - [a c|b a] + [a c|a b]    - (a|d) - [a c|d c] + [a c|c d]  (a|a) + (c|c) - G(a,c) + F(a,c)","category":"page"},{"location":"common_operators/","page":"Common N-body operators","title":"Common N-body operators","text":"An energy expression like this can then be used to derive the multi-configurational Hartree–Fock equations for the orbitals a,b,c,d.","category":"page"},{"location":"common_operators/","page":"Common N-body operators","title":"Common N-body operators","text":"We can also specify that e.g. the orbitals b and c are non-orthogonal, and thus derive a slightly different energy expression, that takes this into account:","category":"page"},{"location":"common_operators/","page":"Common N-body operators","title":"Common N-body operators","text":"julia> Matrix(H, slaters, [OrbitalOverlap(:b,:c)])\n3×3 Array{EnergyExpressions.NBodyMatrixElement,2}:\n (a|a) + (b|b) - G(a,b) + F(a,b)             - ⟨b|c⟩(a|d) - [a b|d c] + [a b|c d]  ⟨b|c⟩(a|a) + (b|c) - [a b|c a] + [a b|a c]\n - ⟨c|b⟩(d|a) - [c d|b a] + [c d|a b]        (c|c) + (d|d) - G(c,d) + F(c,d)       - (d|a) - [c d|c a] + [c d|a c]\n ⟨c|b⟩(a|a) + (c|b) - [a c|b a] + [a c|a b]  - (a|d) - [a c|d c] + [a c|c d]       (a|a) + (c|c) - G(a,c) + F(a,c)","category":"page"},{"location":"common_operators/","page":"Common N-body operators","title":"Common N-body operators","text":"Beware that the computational complexity grows factorially with the amount of non-orthogonal orbitals!","category":"page"},{"location":"common_operators/","page":"Common N-body operators","title":"Common N-body operators","text":"OneBodyHamiltonian\nFieldFreeOneBodyHamiltonian\nCoulombInteraction\niszero","category":"page"},{"location":"common_operators/#EnergyExpressions.OneBodyHamiltonian","page":"Common N-body operators","title":"EnergyExpressions.OneBodyHamiltonian","text":"OneBodyHamiltonian\n\nThe one-body Hamiltonian, may include external fields. It is diagonal in spin, i.e. it does not couple orbitals of opposite spin.\n\n\n\n\n\n","category":"type"},{"location":"common_operators/#EnergyExpressions.FieldFreeOneBodyHamiltonian","page":"Common N-body operators","title":"EnergyExpressions.FieldFreeOneBodyHamiltonian","text":"FieldFreeOneBodyHamiltonian\n\nThe one-body Hamiltonian, with no external fields. It is diagonal in the orbital symmetry.\n\n\n\n\n\n","category":"type"},{"location":"common_operators/#EnergyExpressions.CoulombInteraction","page":"Common N-body operators","title":"EnergyExpressions.CoulombInteraction","text":"CoulombInteraction\n\nTwo-body Hamiltonian, representing the mutual Coulombic repulsion between two electrons. Is diagonal in spin, i.e. the spin of the orbitals associated with the same coordinate must be the same.\n\nExamples\n\njulia> EnergyExpressions.OrbitalMatrixElement((:a,:b), CoulombInteraction(), (:c,:d))\n[a b|c d]\n\njulia> EnergyExpressions.OrbitalMatrixElement((:a,:b), CoulombInteraction(), (:b,:a))\nG(a,b)\n\n\n\n\n\n","category":"type"},{"location":"common_operators/#Base.iszero","page":"Common N-body operators","title":"Base.iszero","text":"iszero(me::EnergyExpressions.OrbitalMatrixElement{1,<:SpinOrbital{<:Orbital},OneBodyHamiltonian,<:SpinOrbital{<:Orbital}})\n\nThe matrix element vanishes if the spin-orbitals do not have the same spin.\n\n\n\n\n\niszero(me::EnergyExpressions.OrbitalMatrixElement{2,<:SpinOrbital{<:Orbital},CoulombInteraction,<:SpinOrbital{<:Orbital}})\n\nThe matrix element vanishes if the (non-relativistic) spin-orbitals associated with the same coordinate do not have the same spin.\n\n\n\n\n\n","category":"function"},{"location":"common_operators/","page":"Common N-body operators","title":"Common N-body operators","text":" DocTestSetup = nothing","category":"page"},{"location":"conjugate_orbitals/#Conjugate-orbitals","page":"Conjugate orbitals","title":"Conjugate orbitals","text":"","category":"section"},{"location":"conjugate_orbitals/","page":"Conjugate orbitals","title":"Conjugate orbitals","text":"DocTestSetup = quote\n    using EnergyExpressions\n    using AtomicLevels\nend","category":"page"},{"location":"conjugate_orbitals/","page":"Conjugate orbitals","title":"Conjugate orbitals","text":"A conjugated orbital, conjchi (often written brachi) is the dual to the unconjugated orbital chi (often written ketchi). In the code, conjugation of orbitals is denoted with a dagger (†) to avoid confusion with the multiplication operator *.","category":"page"},{"location":"conjugate_orbitals/","page":"Conjugate orbitals","title":"Conjugate orbitals","text":"Conjugate\nconj","category":"page"},{"location":"conjugate_orbitals/#EnergyExpressions.Conjugate","page":"Conjugate orbitals","title":"EnergyExpressions.Conjugate","text":"Conjugate(orbital)\n\nType representing the conjugation of an orbital.\n\nExamples\n\njulia> Conjugate(:a)\n:a†\n\n\n\n\n\n","category":"type"},{"location":"conjugate_orbitals/#Base.conj","page":"Conjugate orbitals","title":"Base.conj","text":"conj(o::AbstractOrbital)\n\nConvenience function to conjugate an AbstractOrbital.\n\nExamples\n\njulia> conj(o\"1s\")\n1s†\n\n\n\n\n\nconj(o::Conjugate)\n\nConvenience function to unconjugate a conjugated orbital.\n\nExamples\n\njulia> conj(Conjugate(:a))\n:a\n\n\n\n\n\n","category":"function"},{"location":"conjugate_orbitals/","page":"Conjugate orbitals","title":"Conjugate orbitals","text":" DocTestSetup = nothing","category":"page"},{"location":"nbody_matrix_elements/#N-body-matrix-elements","page":"N-body matrix elements","title":"N-body matrix elements","text":"","category":"section"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"CurrentModule = EnergyExpressions\nDocTestSetup = quote\n    using EnergyExpressions\n    using AtomicLevels\nend","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"The matrix element of an N-body operator between two Slater determinants may be expanded according to the Löwdin rules (which reduce to the Slater–Condon rules if all single-particle orbitals are orthogonal):","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"beginequation\nlabeleqnmatrix-element-expansion\nmatrixelPhi_AOmega_nPhi_B =\nfrac1nsum_p (-)^p\nmatrixelk_1k_2k_nOmega_nl_1l_2l_n\nD^AB(k_1k_2k_nl_1l_2l_n)\nendequation","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"where D^AB(k_1k_2k_nl_1l_2l_n) is the determinant minor of the orbital overlap determinant D^AB with the rows k_1k_2k_n and columns l_1l_2l_n stricken out, and p runs over all permutations.","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"In general, a term in the expansion is thus of the form","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"beginequation\nalphamatrixelk_1k_2k_nOmega_nl_1l_2l_nbraketabbraketcddotsbraketyz\nendequation","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"where alpha is a scalar. This is represented by NBodyTerm type.","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"NBodyTermFactor\nOrbitalOverlap\nOrbitalMatrixElement\nnumbodies\nNBodyTerm","category":"page"},{"location":"nbody_matrix_elements/#EnergyExpressions.NBodyTermFactor","page":"N-body matrix elements","title":"EnergyExpressions.NBodyTermFactor","text":"NBodyTermFactor\n\nAbstract type for a factor in a term in a N-body matrix element expansion\n\n\n\n\n\n","category":"type"},{"location":"nbody_matrix_elements/#EnergyExpressions.OrbitalOverlap","page":"N-body matrix elements","title":"EnergyExpressions.OrbitalOverlap","text":"OrbitalOverlap(a,b)\n\nRepresents the overlap between the orbitals a and b in a N-body matrix element expansion.\n\nExamples\n\njulia> EnergyExpressions.OrbitalOverlap(:a,:b)\n⟨a|b⟩\n\n\n\n\n\n","category":"type"},{"location":"nbody_matrix_elements/#EnergyExpressions.OrbitalMatrixElement","page":"N-body matrix elements","title":"EnergyExpressions.OrbitalMatrixElement","text":"OrbitalMatrixElement(a,o,b)\n\nRepresents the N-body matrix element between the sets of orbitals a and b.\n\nExamples\n\njulia> struct MyTwoBodyOperator <: TwoBodyOperator end\n\njulia> EnergyExpressions.OrbitalMatrixElement((:a,:b), MyTwoBodyOperator(), (:c,:d))\n⟨a b|MyTwoBodyOperator()|c d⟩\n\n\n\n\n\n","category":"type"},{"location":"nbody_matrix_elements/#EnergyExpressions.numbodies","page":"N-body matrix elements","title":"EnergyExpressions.numbodies","text":"numbodies(::NBodyOperator{N})\n\nReturns the number of bodies coupled by the N-body operator, i.e. N.\n\n\n\n\n\nnumbodies(lco::LinearCombinationOperator)\n\nReturns the maximum number of bodies coupled by any of the N-body operators in the LinearCombinationOperator.\n\n\n\n\n\nnumbodies(::OrbitalOverlap)\n\nReturns the number of bodies coupled by the zero-body operator in the orbital overlap, i.e. 0.\n\n\n\n\n\nnumbodies(::OrbitalMatrixElement{N})\n\nReturns the number of bodies coupled by the operator, i.e. N.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#EnergyExpressions.NBodyTerm","page":"N-body matrix elements","title":"EnergyExpressions.NBodyTerm","text":"NBodyTerm(factors, coeff)\n\nStructure representing one term in the expansion of a N-body matrix element.\n\n\n\n\n\n","category":"type"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"Modules = [EnergyExpressions]\nFilter = t -> (t === EnergyExpressions.NBodyMatrixElement)","category":"page"},{"location":"nbody_matrix_elements/#EnergyExpressions.NBodyMatrixElement","page":"N-body matrix elements","title":"EnergyExpressions.NBodyMatrixElement","text":"NBodyMatrixElement(terms)\n\nStructure representing the expansion of a N-body matrix element.\n\n\n\n\n\n","category":"type"},{"location":"nbody_matrix_elements/#EnergyExpressions.NBodyMatrixElement-Union{Tuple{Cfg}, Tuple{Cfg, EnergyExpressions.LinearCombinationOperator, Cfg, Any}} where Cfg","page":"N-body matrix elements","title":"EnergyExpressions.NBodyMatrixElement","text":"NBodyMatrixElement(a, op, b, overlap)\n\nGenerate the matrix element of op, a linear combination of NBodyOperator, between the configurations (e.g. Slater determinants) a and b, according to the Löwdin rules. The matrix overlap contains the mutual overlaps between all single-particle orbitals in the Slater determinants. If the orbitals are all orthogonal, the Löwdin rules collapse to the Slater–Condon rules.\n\n\n\n\n\n","category":"method"},{"location":"nbody_matrix_elements/#EnergyExpressions.NBodyMatrixElement-Union{Tuple{N}, Tuple{Any, NBodyOperator{N}, Any, Any}} where N","page":"N-body matrix elements","title":"EnergyExpressions.NBodyMatrixElement","text":"NBodyMatrixElement(a, op, b, nzcofactors)\n\nGenerate the matrix element of the N-body operator op, between the orbital sets a and b, where nzcofactors list all N-tuples for which the determinantal cofactor of the orbital overlap matrix is non-vanishing.\n\n\n\n\n\n","category":"method"},{"location":"nbody_matrix_elements/#EnergyExpressions.NBodyMatrixElement-Union{Tuple{N}, Tuple{SlaterDeterminant, NBodyOperator{N}, SlaterDeterminant, AbstractMatrix{T} where T}} where N","page":"N-body matrix elements","title":"EnergyExpressions.NBodyMatrixElement","text":"NBodyMatrixElement(a, op, b, overlap)\n\nGenerate the matrix element of the N-body operator op, between the Slater determinants a and b, according to the Löwdin rules. The matrix overlap contains the mutual overlaps between all single-particle orbitals in the Slater determinants. If the orbitals are all orthogonal, the Löwdin rules collapse to the Slater–Condon rules.\n\n\n\n\n\n","category":"method"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"isdependent\ntransform\noverlap_matrix\nEnergyExpressions.compare\nBase.:(==)(::EnergyExpressions.NBodyMatrixElement, ::EnergyExpressions.NBodyMatrixElement)\nBase.isapprox(::EnergyExpressions.NBodyMatrixElement, ::EnergyExpressions.NBodyMatrixElement)\nEnergyExpression\nMatrix","category":"page"},{"location":"nbody_matrix_elements/#EnergyExpressions.isdependent","page":"N-body matrix elements","title":"EnergyExpressions.isdependent","text":"isdependent(o::OrbitalOverlap, orbital)\n\nReturns true if the OrbitalOverlap o depends on orbital.\n\nExamples\n\njulia> isdependent(OrbitalOverlap(:a,:b), :a)\nfalse\n\njulia> isdependent(OrbitalOverlap(:a,:b), Conjugate(:a))\ntrue\n\njulia> isdependent(OrbitalOverlap(:a,:b), :b)\ntrue\n\n\n\n\n\nisdependent(o::OrbitalMatrixElement, orbital)\n\nReturns true if the OrbitalMatrixElement o depends on orbital.\n\nExamples\n\njulia> isdependent(EnergyExpressions.OrbitalMatrixElement((:a,), OneBodyHamiltonian(), (:b,)), :a)\nfalse\n\njulia> isdependent(EnergyExpressions.OrbitalMatrixElement((:a,), OneBodyHamiltonian(), (:b,)), Conjugate(:a))\ntrue\n\njulia> isdependent(EnergyExpressions.OrbitalMatrixElement((:a,), OneBodyHamiltonian(), (:b,)), :b)\ntrue\n\njulia> isdependent(EnergyExpressions.OrbitalMatrixElement((:a,:b,), CoulombInteraction(), (:c,:d)), :c)\ntrue\n\n\n\n\n\nisdependent(nbt::NBodyTerm, o)\n\nReturns true if any of the factors comprising nbt is dependent on the orbital o. Not that the result is dependent on whether o is conjugated or not.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#EnergyExpressions.transform","page":"N-body matrix elements","title":"EnergyExpressions.transform","text":"transform(f::Function, nbt::NBodyTerm)\n\nTransform integrals of the the N-body matrix element expansion term nbt according to the function f, which should accept a single NBodyTermFactor as its argument.\n\n\n\n\n\ntransform(f::Function, nbme::NBodyMatrixElement)\n\nTransform integrals of the the N-body matrix element nbme according to the function f, which should accept a single NBodyTermFactor as its argument, and return a NBodyMatrixElement. This is useful for adapting energy expressions to specific symmetries of the system under consideration.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#EnergyExpressions.overlap_matrix","page":"N-body matrix elements","title":"EnergyExpressions.overlap_matrix","text":"overlap_matrix(a::Cfg, b::Cfg[, overlaps=[]]) where Cfg\n\nGenerate the single-particle orbital overlap matrix, between the orbitals in the configurations (e.g. Slater determinants) a and b. All orbitals are assumed to be orthogonal, except for those which are given in overlaps.\n\nExamples\n\nFirst we define two Slater determinants that have some orbitals in common:\n\njulia> sa = SlaterDeterminant([:i, :j, :l,:k̃])\ni(1)j(2)l(3)k̃(4) - i(1)j(2)l(4)k̃(3) - i(1)j(3)l(2)k̃(4) + i(1)j(3)l(4)k̃(2) + …  + i(4)j(1)l(3)k̃(2) + i(4)j(2)l(1)k̃(3) - i(4)j(2)l(3)k̃(1) - i(4)j(3)l(1)k̃(2) + i(4)j(3)l(2)k̃(1)\n\njulia> sb = SlaterDeterminant([:i, :j, :k, :l̃])\ni(1)j(2)k(3)l̃(4) - i(1)j(2)k(4)l̃(3) - i(1)j(3)k(2)l̃(4) + i(1)j(3)k(4)l̃(2) + …  + i(4)j(1)k(3)l̃(2) + i(4)j(2)k(1)l̃(3) - i(4)j(2)k(3)l̃(1) - i(4)j(3)k(1)l̃(2) + i(4)j(3)k(2)l̃(1)\n\nThe orbital overlap matrix by default is\n\njulia> overlap_matrix(sa, sb)\n4×4 SparseArrays.SparseMatrixCSC{EnergyExpressions.NBodyTerm,Int64} with 2 stored entries:\n  [1, 1]  =  1\n  [2, 2]  =  1\n\nwhich has only two non-zero entries, since only two of the orbitals are common between the Slater determinants sa and sb.\n\nWe can then define that the orbitals k̃ and l̃ are non-orthogonal:\n\njulia> overlap_matrix(sa, sb, [OrbitalOverlap(:k̃,:l̃)])\n4×4 SparseArrays.SparseMatrixCSC{EnergyExpressions.NBodyTerm,Int64} with 3 stored entries:\n  [1, 1]  =  1\n  [2, 2]  =  1\n  [4, 4]  =  ⟨k̃|l̃⟩\n\nWe can even specify that the orbital k̃ is non-orthogonal to itself (this can be useful when the k̃ is a linear combination of orthogonal orbitals):\n\njulia> overlap_matrix(sa, sa, [OrbitalOverlap(:k̃,:k̃)])\n4×4 SparseArrays.SparseMatrixCSC{EnergyExpressions.NBodyTerm,Int64} with 4 stored entries:\n  [1, 1]  =  1\n  [2, 2]  =  1\n  [3, 3]  =  1\n  [4, 4]  =  ⟨k̃|k̃⟩\n\nNotice that this overlap matrix was calculated between the Slater determinant sa and itself.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#EnergyExpressions.compare","page":"N-body matrix elements","title":"EnergyExpressions.compare","text":"compare(a::NBodyMatrixElement, op, b::NBodyMatrixElement; kwargs...)\n\nCompare the NBodyMatrixElements a and b for similarity; all the terms of a need to be present in b, and vice versa, and their expansion coefficients have to agree when compared using op.\n\nThis function is mainly designed for testing purposes, i.e. to compare an expression with a reference, generated otherwise. It may not be performant. It may also fail on edge cases.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#Base.:==-Tuple{EnergyExpressions.NBodyMatrixElement, EnergyExpressions.NBodyMatrixElement}","page":"N-body matrix elements","title":"Base.:==","text":"Base.:(==)(a::NBodyMatrixElement, b::NBodyMatrixElement; kwargs...)\n\nTest if a and b are exactly equal to each other, i.e. their terms all agree exactly, as well as the expansion coefficients. The actual comparison is performed by compare.\n\n\n\n\n\n","category":"method"},{"location":"nbody_matrix_elements/#Base.isapprox-Tuple{EnergyExpressions.NBodyMatrixElement, EnergyExpressions.NBodyMatrixElement}","page":"N-body matrix elements","title":"Base.isapprox","text":"Base.isapprox(a::NBodyMatrixElement, b::NBodyMatrixElement; kwargs...)\n\nTest if a and b are approximately equal to each other, i.e. their terms all agree exactly, and the expansion coefficients are approximately equal. The actual comparison is performed by compare.\n\n\n\n\n\n","category":"method"},{"location":"nbody_matrix_elements/#EnergyExpressions.EnergyExpression","page":"N-body matrix elements","title":"EnergyExpressions.EnergyExpression","text":"EnergyExpression\n\nAn energy expression is given by an energy matrix, or interaction matrix, sandwiched between a vector of mixing coefficients: E = c'H*c, where c are the mixing coefficients and H the energy matrix.\n\n\n\n\n\n","category":"type"},{"location":"nbody_matrix_elements/#Base.Matrix","page":"N-body matrix elements","title":"Base.Matrix","text":"Matrix(a, op::QuantumOperator, b[, overlaps])\n\nGenerate the matrix corresponding to the quantum operator op, between the configurations (e.g. SlaterDeterminants) a and b, i.e ⟨a|op|b⟩. It is possible to specify non-orthogonalities between single-particle orbitals in overlaps.\n\n\n\n\n\nMatrix(op::QuantumOperator, slater_determinants[, overlaps])\n\nGenerate the matrix corresponding to the quantum operator op, between the different slater_determinants. It is possible to specify non-orthogonalities between single-particle orbitals in overlaps.\n\n\n\n\n\n","category":"type"},{"location":"nbody_matrix_elements/#Calculation-of-determinants","page":"N-body matrix elements","title":"Calculation of determinants","text":"","category":"section"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"Actually computing the matrix element expansion eqrefeqnmatrix-element-expansion is a combinatorial problem, that grows factorially with the amount of non-orthogonal orbital pairs. Furthermore, of the (n)^2 terms generated from the expansion, only n are distinct, due to the integrals being symmetric with respect to interchange of the coordinates [hence the normalization factor (n)^-1]. Thankfully, there are few symmetries that can be employed, to generate only the distinct permutations, as well as the fact that the overlap matrix is very sparse.","category":"page"},{"location":"nbody_matrix_elements/#Finding-non-zero-minors-of-the-overlap-determinant","page":"N-body matrix elements","title":"Finding non-zero minors of the overlap determinant","text":"","category":"section"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"The algorithm to find which minor determinants Gamma^(N)(k_1k_2k_Nl_1l_2l_N) do not vanish, and hence which N orbitals k_1k_2k_Nl_1l_2l_N the N-body operator should be contracted over, is described briefly below. It is devised to be optimal for orthogonal orbitals (i.e. linear complexity mathcalO(Nn) where n is the number of orbitals), and near-optimal for a small amount of non-orthogonal orbitals.","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"Given:","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"An N-body operator (implying N rows and N need to stricken out), and\nan ntimes n matrix, with coordinates of non-zero matrix elements: IJ (from these vectors, vanishing rows/columns can easily be deduced implies N_r row/N_c column \"rank\", i.e. yet to be stricken out),","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"do","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"find all N_r-combinations of the remaining rows,\nfor each such combination, find all columns which would be affected if striking out that particular combination of rows,\nif the \"support\" (i.e. the only non-zero elements) of any of those columns vanishes when striking out the rows, that column must be stricken out, too. Total number of these columns is named N_cm,\nif more than N_c columns must be stricken out (N_cmN_c), that row combination is unviable,\nfind all N_c - N_cm-combinations of the remaining columns,\nfor each such combination of columns, find all rows which would be affected,\nif the support of any of those rows vanishes when striking out the candidate columns, and the row is not in the candidate set of rows to be stricken out, the column combination is unviable.","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"nonzero_minors","category":"page"},{"location":"nbody_matrix_elements/#EnergyExpressions.nonzero_minors","page":"N-body matrix elements","title":"EnergyExpressions.nonzero_minors","text":"nonzero_minors(N, overlap) -> (ks,ls)\n\nFind all (distinct) minor determinants of order N of the orbital overlap matrix that do not vanish, i.e. all non-vanishing minors are guaranteed to be present, but not all of the returned minors are guaranteed to be non-zero. Vanishing minors returned arise when the overlap matrix is rank deficient, which is unlikely to happen when computing energy expressions, but must still be guarded against. This is most easily checked by actually calculating the cofactor, which is most likely desired anyway.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#Contracting-over-the-stricken-out-orbitals","page":"N-body matrix elements","title":"Contracting over the stricken out orbitals","text":"","category":"section"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"We use Julia's built-in Base.Cartesian.@nloops iterators to span the space of all possible choices of orbitals for the contraction of orbitals. If two or more orbitals are the same, the matrix element is trivially zero (the “Fermi hole”). To avoid double-counting, we also only consider those indices that are above the hyper-diagonal.","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"detaxis\ndetminor\n# indexsum\ncofactor\nEnergyExpressions.distinct_permutations\ndet\npermutation_sign\npowneg1\nEnergyExpressions.@above_diagonal_loop\nEnergyExpressions.@anti_diagonal_loop","category":"page"},{"location":"nbody_matrix_elements/#EnergyExpressions.detaxis","page":"N-body matrix elements","title":"EnergyExpressions.detaxis","text":"detaxis(i::CartesianIndex{N})\n\nGenerate the axis index vector for the determinant minor, whose rows or columns represented by the CartesianIndex i should be omitted. Implemented via complement.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#EnergyExpressions.detminor","page":"N-body matrix elements","title":"EnergyExpressions.detminor","text":"detminor(k, l, A)\n\nCalculate the determinant minor of A, where the rows k and the columns l have been stricken out.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#EnergyExpressions.cofactor","page":"N-body matrix elements","title":"EnergyExpressions.cofactor","text":"cofactor(k, l, A)\n\nCalculate the cofactor of A, where the rows k and the columns l have been stricken out. The cofactor is calculated recursively, by expanding the minor determinants in cofactors, so this function should only be used in case it is known that the cofactor is non-zero.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#EnergyExpressions.distinct_permutations","page":"N-body matrix elements","title":"EnergyExpressions.distinct_permutations","text":"distinct_permutations(fun::Function, ::NBodyOperator{N}, b)\n\nGenerate all distinct permutations p of b (which is expected to be of length N), and call fun(σ, b[p]) where σ=(-1)^p is the sign of the permutation p.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#LinearAlgebra.det","page":"N-body matrix elements","title":"LinearAlgebra.det","text":"det(A)\n\nCalculate the determinant of the matrix A whose elements are of the NBodyTerm type, by expanding the determinant along the first column. This is an expensive operation, and should only be done with relatively sparse matrices.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#EnergyExpressions.permutation_sign","page":"N-body matrix elements","title":"EnergyExpressions.permutation_sign","text":"permutation_sign(p)\n\nCalculate the sign of the permutation p, 1 if iseven(p), -1 otherwise.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#EnergyExpressions.powneg1","page":"N-body matrix elements","title":"EnergyExpressions.powneg1","text":"powneg1(k) = (-)ᵏ\n\nCalculates powers of negative unity for integer k.\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/#EnergyExpressions.@above_diagonal_loop","page":"N-body matrix elements","title":"EnergyExpressions.@above_diagonal_loop","text":"above_diagonal_loop(N, itersym, imax, args...)\n\nGenerate N Cartesian loops for the iteration variables itersym_{1:N}, where itersym_N ∈ 1:imax, itersym_{N-1} ∈ itersym_N+1:imax, etc, i.e. above the hyper-diagonal of the N-dimensional hypercube with the side imax. args... is passed on to Base.Cartesian._nloops. above_diagonal_loop is nestable.\n\nExamples\n\njulia> @above_diagonal_loop 2 i 3 begin\n           println(\"==================================\")\n           println(\"i = \", Base.Cartesian.@ntuple 2 i)\n           @above_diagonal_loop 2 j 3 begin\n               println(\"j = \", Base.Cartesian.@ntuple 2 j)\n           end\n       end\n==================================\ni = (2, 1)\nj = (2, 1)\nj = (3, 1)\nj = (3, 2)\n==================================\ni = (3, 1)\nj = (2, 1)\nj = (3, 1)\nj = (3, 2)\n==================================\ni = (3, 2)\nj = (2, 1)\nj = (3, 1)\nj = (3, 2)\n\n\n\n\n\n","category":"macro"},{"location":"nbody_matrix_elements/#EnergyExpressions.@anti_diagonal_loop","page":"N-body matrix elements","title":"EnergyExpressions.@anti_diagonal_loop","text":"anti_diagonal_loop(N, itersym, imax, args...)\n\nGenerate N Cartesian loops for the iteration variables itersym_{1:N}, where itersym_N ∈ 1:imax, itersym_{N-1} ∈ 1:imax\\itersym_N, etc, i.e. no two iteration variables have the same values simultaneously. args... is passed on to Base.Cartesian._nloops; however, preexpr is already used to skip the diagonal elements. anti_diagonal_loop is nestable.\n\nExamples\n\njulia> @anti_diagonal_loop 3 i 3 begin\n           println(\"-----------------------------\")\n           t = (Base.Cartesian.@ntuple 3 i)\n           println(\"$t: \", allunique(t))\n           @anti_diagonal_loop 2 j 2 begin\n               u = (Base.Cartesian.@ntuple 2 j)\n               println(\"$u: \", allunique(u))\n           end\n       end\n-----------------------------\n(3, 2, 1): true\n(2, 1): true\n(1, 2): true\n-----------------------------\n(2, 3, 1): true\n(2, 1): true\n(1, 2): true\n-----------------------------\n(3, 1, 2): true\n(2, 1): true\n(1, 2): true\n-----------------------------\n(1, 3, 2): true\n(2, 1): true\n(1, 2): true\n-----------------------------\n(2, 1, 3): true\n(2, 1): true\n(1, 2): true\n-----------------------------\n(1, 2, 3): true\n(2, 1): true\n(1, 2): true\n\n\n\n\n\n","category":"macro"},{"location":"nbody_matrix_elements/#Occupation-number-representation","page":"N-body matrix elements","title":"Occupation number representation","text":"","category":"section"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"As an alternative to SlaterDeterminant, we also provide an implementation of the occupation number representation (i.e. second quantization). Every configuration is thus represented as a bit vector, indicating the occupation of a specific orbital by a true value. Excitations between two configurations are easily computed using bitwise operations. The present implementation is inspired by","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"Scemama, A., & Giner, E. (2013). An efficient implementation of Slater–Condon rules. CoRR, arXiv:1311.6244,","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"but extends upon it by also supporting non-orthogonal orbitals.","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"The benefit of this approach is much more efficient identification of which cofactors in eqrefeqnmatrix-element-expansion are non-zero, than the approach taken in nonzero_minors.","category":"page"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":"BitConfigurations\nEnergyExpressions.Orbitals\nEnergyExpressions.non_zero_cofactors","category":"page"},{"location":"nbody_matrix_elements/#EnergyExpressions.BitConfigurations","page":"N-body matrix elements","title":"EnergyExpressions.BitConfigurations","text":"BitConfigurations(orbitals, configurations)\n\nRepresent collection of configurations as bit vectors, where true values indicate that specific orbitals are occupied.\n\nExample\n\njulia> bcs = BitConfigurations([[:a,:b,:c], [:x,:b,:c], [:a,:y,:c], [:a,:b,:z]])\n6-orbital 4-configuration BitConfigurations\n\n1: a b c\n2: a -> x\n3: b -> y\n4: c -> z\n\njulia> h = FieldFreeOneBodyHamiltonian()\nĥ₀\n\njulia> Matrix(bcs, h)\n4×4 SparseMatrixCSC{NBodyMatrixElement, Int64} with 10 stored entries:\n (a|a) + (b|b) + (c|c)  (a|x)                  - (b|y)                (c|z)\n (x|a)                  (b|b) + (c|c) + (x|x)  ⋅                      ⋅\n - (y|b)                ⋅                      (a|a) + (c|c) + (y|y)  ⋅\n (z|c)                  ⋅                      ⋅                      (a|a) + (b|b) + (z|z)\n\n\n\n\n\n","category":"type"},{"location":"nbody_matrix_elements/#EnergyExpressions.Orbitals","page":"N-body matrix elements","title":"EnergyExpressions.Orbitals","text":"Orbitals(orbitals, overlaps, has_overlap, non_orthogonalities)\n\nStructure storing a common set of orbitals, along with possible overlaps between them, in case of non-orthogonalities. has_overlap is a boolean matrix indicates if a pair of orbitals have overlap, either due to non-orthogonality or if they are the same orbital. non_orthogonalities is a boolean vector that indicates if a specific orbital is non-orthogonal to any other orbital in the set of orbitals. This structure is used internally by BitConfigurations.\n\n\n\n\n\n","category":"type"},{"location":"nbody_matrix_elements/#EnergyExpressions.non_zero_cofactors","page":"N-body matrix elements","title":"EnergyExpressions.non_zero_cofactors","text":"non_zero_cofactors(sd, N, i, j)\n\nFind all non-zero cofactors of the orbital overlap matrix between the Slater determinants i & j of sd, generated when striking out N rows & columns. This routine is tailored towards the case when few non-orthogonalities are present, e.g. approximately proportional to the number of orbitals.\n\nNon-orthogonality between spin-orbitals is handled by dividing the them into two subspaces:\n\nThe orthogonal spin-orbitals that are common to both Slater determinants (core orbitals),\nAll non-orthogonal orbitals, and the orbitals which differ between the Slater determinants (i.e. holes of i and particles of j).\n\nThe relative phase between the Slater determinants is determined by group 2 alone, by permuting the particles to the positions of the holes, we find this phase. We can then formally permute them together to a diagonal block at lower-right corner of the orbital overlap matrix without incurring a phase change, since we need to permute the same number of rows and columns. We thus get this structure:\n\n                 ╷       ╷\n                 │ 1 │   │\n det(Sᵢⱼ) = (-)ᵏ │───┼───│\n                 │   │ 2 │\n                 ╵       ╵\n\nwhere k is decided by the permutation necessary to put the particles in the positions of the holes.\n\nObviously, the determinant of the orbital matrix is now given by det(Sᵢⱼ) = (-)ᵏ*det(2), since we trivially have det(1)==1.\n\nDepending on the rank of 2 (determined by the number of hole–particle pairs and which spin-orbitals are non-orthogonal), we need to strike out at least size(2,1)-rank(2) rows/columns from 2, and at most min(N,size(2,1)), i.e. for each value of n ∈ size(2,1)-rank(2):min(N,size(2,1)), we need to additionally strike out m = N - n rows from 1, but since the determinant of subspace 1 is unity, regardless of how many rows/columns we've stricken out, this is a trivial excercise. Of course, we also require that m ≤ size(1,1).\n\n\n\n\n\n","category":"function"},{"location":"nbody_matrix_elements/","page":"N-body matrix elements","title":"N-body matrix elements","text":" DocTestSetup = nothing","category":"page"},{"location":"nbody_operators/#N-body-operators","page":"N-body operators","title":"N-body operators","text":"","category":"section"},{"location":"nbody_operators/","page":"N-body operators","title":"N-body operators","text":"CurrentModule = EnergyExpressions\nDocTestSetup = quote\n    using EnergyExpressions\n    using AtomicLevels\nend","category":"page"},{"location":"nbody_operators/","page":"N-body operators","title":"N-body operators","text":"NBodyOperator\nLinearCombinationOperator\nIdentityOperator\nContractedOperator\nBase.in(orbital::O, co::ContractedOperator) where O\nBase.in(corbital::Conjugate{O}, co::ContractedOperator) where O\ncontract\ncomplement\nLinearAlgebra.ishermitian(::QuantumOperator)","category":"page"},{"location":"nbody_operators/#EnergyExpressions.NBodyOperator","page":"N-body operators","title":"EnergyExpressions.NBodyOperator","text":"NBodyOperator{N}\n\nAbstract N-body operator coupling N bodies each between two Slater determinants\n\n\n\n\n\n","category":"type"},{"location":"nbody_operators/#EnergyExpressions.LinearCombinationOperator","page":"N-body operators","title":"EnergyExpressions.LinearCombinationOperator","text":"LinearCombinationOperator(operators)\n\nRepresents a linear combination of NBodyOperators.\n\n\n\n\n\n","category":"type"},{"location":"nbody_operators/#EnergyExpressions.IdentityOperator","page":"N-body operators","title":"EnergyExpressions.IdentityOperator","text":"IdentityOperator{N}\n\nThe N-body identity operator. Leaves the orbital(s) acted upon unchanged.\n\n\n\n\n\n","category":"type"},{"location":"nbody_operators/#EnergyExpressions.ContractedOperator","page":"N-body operators","title":"EnergyExpressions.ContractedOperator","text":"ContractedOperator(a, o, b)\n\nAn NBodyOperator representing the contraction of the operator o over the orbital sets a and b. The lengths of a and b have to equal, and they cannot exceed the dimension of o.\n\n\n\n\n\n","category":"type"},{"location":"nbody_operators/#Base.in-Union{Tuple{O}, Tuple{O, ContractedOperator}} where O","page":"N-body operators","title":"Base.in","text":"in(orbital, co::ContractedOperator)\n\nTest if orbital is among the right set of orbitals of the ContractedOperator co. Useful to test if co is an integral operator with respect to orbital.\n\n\n\n\n\n","category":"method"},{"location":"nbody_operators/#Base.in-Union{Tuple{O}, Tuple{Conjugate{O}, ContractedOperator}} where O","page":"N-body operators","title":"Base.in","text":"in(corbital::Conjugate, co::ContractedOperator)\n\nTest if corbital is among the left set of orbitals of the ContractedOperator co. Useful to test if co is an integral operator with respect to corbital.\n\n\n\n\n\n","category":"method"},{"location":"nbody_operators/#EnergyExpressions.contract","page":"N-body operators","title":"EnergyExpressions.contract","text":"contract(orbital_matrix_element, i...)\n\nContract the orbital_matrix_element over all coordinates i....\n\n\n\n\n\n","category":"function"},{"location":"nbody_operators/#EnergyExpressions.complement","page":"N-body operators","title":"EnergyExpressions.complement","text":"complement(N, i...)\n\nGenerate the complement to i... in the set 1:N. Useful for contracting OrbitalMatrixElements over all coordinates except i....\n\n\n\n\n\n","category":"function"},{"location":"nbody_operators/#LinearAlgebra.ishermitian-Tuple{QuantumOperator}","page":"N-body operators","title":"LinearAlgebra.ishermitian","text":"ishermitian(op::QuantumOperator)\n\nBy default, all QuantumOperators are Hermitian; this can be overridden for subtypes to explicitly declare an operator non-Hermitian.\n\n\n\n\n\n","category":"method"},{"location":"nbody_operators/","page":"N-body operators","title":"N-body operators","text":" DocTestSetup = nothing","category":"page"},{"location":"#EnergyExpressions.jl","page":"Home","title":"EnergyExpressions.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EnergyExpressions.jl provides the basis for deriving equations of motion for many-body quantum systems, including, but not limited to, atoms and molecules. Please see the theory section for an overview of the mathematics and physics involved.","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"Throughout, Einstein notation is employed, meaning that indices appearing twice on only one side of an equation are summed over, e.g.:","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"c = braketii iff c equiv sum_i braketii","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"whereas","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"c_ka = braketak","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"implies no summation.","category":"page"},{"location":"notation/#Spin-orbitals","page":"Notation","title":"Spin-orbitals","text":"","category":"section"},{"location":"notation/","page":"Notation","title":"Notation","text":"beginequation\nchi_a(tau_i) defd\npsi_a(vecr_i)sigma_a(s_i)\nendequation","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"where sigma(s) is either alpha (spin up) or beta (spin down).","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"The overlap between two spin-orbitals is given by","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"beginequation\nbraketij defd intdifftau conjchi_i(tau) chi_j(tau)\nendequation","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"which, the case of orthogonal bases (this is a matter of choice), simplifies to","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"braketij = delta_ij","category":"page"},{"location":"notation/#One-body-matrix-elements","page":"Notation","title":"One-body matrix elements","text":"","category":"section"},{"location":"notation/","page":"Notation","title":"Notation","text":"beginequation\nI(ab) equiv onebodyab defd matrixelahamiltonianb\nendequation","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"where","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"beginequation\nhamiltonian defd T + V\nendequation","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"is the (possibly time-dependent) one-body Hamiltonian.","category":"page"},{"location":"notation/#Two-body-matrix-elements","page":"Notation","title":"Two-body matrix elements","text":"","category":"section"},{"location":"notation/","page":"Notation","title":"Notation","text":"beginequation\ntwobodydxabcd defd\ntwobodyabcd - twobodyabdc\nendequation","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"where","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"beginequation\nbeginaligned\ntwobodyabcd defd\nintdifftau_1difftau_2\nconjchi_a(tau_1)\nconjchi_b(tau_2)\nfrac1r_12\nchi_c(tau_1)\nchi_d(tau_2) \n=\ndelta(sigma_asigma_c)\ndelta(sigma_bsigma_d)\nintdiffvecr_1diffvecr_2\nconjchi_a(vecr_1)\nconjchi_b(vecr_2)\nfrac1r_12\nchi_c(vecr_1)\nchi_d(vecr_2)\nendaligned\nendequation","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"The special case","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"beginequation\nF(ab) defd twobodyabab\nendequation","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"is called the direct interaction (gives rise to the screening potential), and the other special case","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"beginequation\nG(ab) defd twobodyabba\nendequation","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"is called the exchange interaction (gives rise to the non-local potential).","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"note: Note\nSincebeginequation\ntwobodydxiiii = 0\nendequationwe havebeginequation\nfrac12twobodydxijij equiv\nsum_ijitwobodydxijij\nendequationi.e. we sum over ij, divide by two to avoid double-counting and avoid automatically the case i=j.","category":"page"},{"location":"notation/#Repulsion-potential","page":"Notation","title":"Repulsion potential","text":"","category":"section"},{"location":"notation/","page":"Notation","title":"Notation","text":"We also have the repulsion potential formed from two orbitals ab:","category":"page"},{"location":"notation/","page":"Notation","title":"Notation","text":"beginequation\ntwobodyab defd\nintdifftau_1conjchi_a(tau_1)frac1r_12chi_b(tau_1)=\ndelta(sigma_asigma_b)intdiffvecr_1conjchi_a(vecr_1)frac1r_12chi_b(vecr_1)\nendequation","category":"page"}]
}
